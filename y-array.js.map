{"version":3,"file":"y-array.js","sources":["src/y-array.js"],"sourcesContent":["/* global Y */\n\nfunction extend (Y) {\n  class YArray extends Y.utils.CustomType {\n    constructor (os, _model, _content) {\n      super()\n      this.os = os\n      this._model = _model\n      // Array of all the neccessary content\n      this._content = _content\n\n      // the parent of this type\n      this._parent = null\n      this._deepEventHandler = new Y.utils.EventListenerHandler()\n\n      // this._debugEvents = [] // TODO: remove!!\n      this.eventHandler = new Y.utils.EventHandler((op) => {\n        // this._debugEvents.push(JSON.parse(JSON.stringify(op)))\n        if (op.struct === 'Insert') {\n          // when using indexeddb db adapter, the op could already exist (see y-js/y-indexeddb#2)\n          if (this._content.some(function (c) { return Y.utils.compareIds(c.id, op.id) })) {\n            // op exists\n            return\n          }\n          let pos\n          // we check op.left only!,\n          // because op.right might not be defined when this is called\n          if (op.left === null) {\n            pos = 0\n          } else {\n            pos = 1 + this._content.findIndex(function (c) {\n              return Y.utils.compareIds(c.id, op.left)\n            })\n            if (pos <= 0) {\n              throw new Error('Unexpected operation!')\n            }\n          }\n\n          /*\n          (see above for new approach)\n          var _e = this._content[pos]\n          // when using indexeddb db adapter, the op could already exist (see y-js/y-indexeddb#2)\n          // If the algorithm works correctly, the double should always exist on the correct position (pos - the computed destination)\n          if (_e != null && Y.utils.compareIds(_e.id, op.id)) {\n            // is already defined\n            return\n          }\n          */\n          var values\n          var length\n          if (op.hasOwnProperty('opContent')) {\n            this._content.splice(pos, 0, {\n              id: op.id,\n              type: op.opContent\n            })\n            length = 1\n            let type = this.os.getType(op.opContent)\n            type._parent = this._model\n            values = [type]\n          } else {\n            var contents = op.content.map(function (c, i) {\n              return {\n                id: [op.id[0], op.id[1] + i],\n                val: c\n              }\n            })\n            // insert value in _content\n            // It is not possible to insert more than ~2^16 elements in an Array (see #5). We handle this case explicitly\n            if (contents.length < 30000) {\n              this._content.splice.apply(this._content, [pos, 0].concat(contents))\n            } else {\n              this._content = this._content.slice(0, pos).concat(contents).concat(this._content.slice(pos))\n            }\n            values = op.content\n            length = op.content.length\n          }\n          Y.utils.bubbleEvent(this, {\n            type: 'insert',\n            object: this,\n            index: pos,\n            values: values,\n            length: length\n          })\n        } else if (op.struct === 'Delete') {\n          var i = 0 // current position in _content\n          for (; i < this._content.length && op.length > 0; i++) {\n            var c = this._content[i]\n            if (Y.utils.inDeletionRange(op, c.id)) {\n              // is in deletion range!\n              var delLength\n              // check how many character to delete in one flush\n              for (delLength = 1;\n                    delLength < op.length && i + delLength < this._content.length && Y.utils.inDeletionRange(op, this._content[i + delLength].id);\n                    delLength++) {}\n              // last operation that will be deleted\n              c = this._content[i + delLength - 1]\n              // update delete operation\n              op.length -= c.id[1] - op.target[1] + 1\n              op.target = [c.id[0], c.id[1] + 1]\n              // apply deletion & find send event\n              let content = this._content.splice(i, delLength)\n              let values = content.map((c) => {\n                if (c.val != null) {\n                  return c.val\n                } else {\n                  return this.os.getType(c.type)\n                }\n              })\n              Y.utils.bubbleEvent(this, {\n                type: 'delete',\n                object: this,\n                index: i,\n                values: values,\n                _content: content,\n                length: delLength\n              })\n              // with the fresh delete op, we can continue\n              // note: we don't have to increment i, because the i-th content was deleted\n              // but on the other had, the (i+delLength)-th was not in deletion range\n              // So we don't do i--\n            }\n          }\n        } else {\n          throw new Error('Unexpected struct!')\n        }\n      })\n    }\n    _getPathToChild (childId) {\n      return this._content.findIndex(c =>\n        c.type != null && Y.utils.compareIds(c.type, childId)\n      )\n    }\n    _destroy () {\n      this.eventHandler.destroy()\n      this.eventHandler = null\n      this._content = null\n      this._model = null\n      this._parent = null\n      this.os = null\n    }\n    get length () {\n      return this._content.length\n    }\n    get (pos) {\n      if (pos == null || typeof pos !== 'number') {\n        throw new Error('pos must be a number!')\n      }\n      if (pos >= this._content.length) {\n        return undefined\n      }\n      if (this._content[pos].type == null) {\n        return this._content[pos].val\n      } else {\n        return this.os.getType(this._content[pos].type)\n      }\n    }\n    toArray () {\n      return this._content.map((x, i) => {\n        if (x.type != null) {\n          return this.os.getType(x.type)\n        } else {\n          return x.val\n        }\n      })\n    }\n    push (contents) {\n      return this.insert(this._content.length, contents)\n    }\n    insert (pos, contents) {\n      if (typeof pos !== 'number') {\n        throw new Error('pos must be a number!')\n      }\n      if (!Array.isArray(contents)) {\n        throw new Error('contents must be an Array of objects!')\n      }\n      if (contents.length === 0) {\n        return\n      }\n      if (pos > this._content.length || pos < 0) {\n        throw new Error('This position exceeds the range of the array!')\n      }\n      var mostLeft = pos === 0 ? null : this._content[pos - 1].id\n\n      var ops = []\n      var prevId = mostLeft\n      for (var i = 0; i < contents.length;) {\n        var op = {\n          left: prevId,\n          origin: prevId,\n          // right: mostRight,\n          // NOTE: I intentionally do not define right here, because it could be deleted\n          // at the time of inserting this operation (when we get the transaction),\n          // and would therefore not defined in this._content\n          parent: this._model,\n          struct: 'Insert'\n        }\n        var _content = []\n        var typeDefinition\n        while (i < contents.length) {\n          var val = contents[i++]\n          typeDefinition = Y.utils.isTypeDefinition(val)\n          if (!typeDefinition) {\n            _content.push(val)\n          } else if (_content.length > 0) {\n            i-- // come back again later\n            break\n          } else {\n            break\n          }\n        }\n        if (_content.length > 0) {\n          // content is defined\n          op.content = _content\n          op.id = this.os.getNextOpId(_content.length)\n        } else {\n          // otherwise its a type\n          var typeid = this.os.getNextOpId(1)\n          this.os.createType(typeDefinition, typeid)\n          op.opContent = typeid\n          op.id = this.os.getNextOpId(1)\n        }\n        ops.push(op)\n        prevId = op.id\n      }\n      var eventHandler = this.eventHandler\n      this.os.requestTransaction(function * () {\n        // now we can set the right reference.\n        var mostRight\n        if (mostLeft != null) {\n          var ml = yield * this.getInsertionCleanEnd(mostLeft)\n          mostRight = ml.right\n        } else {\n          mostRight = (yield * this.getOperation(ops[0].parent)).start\n        }\n        for (var j = 0; j < ops.length; j++) {\n          var op = ops[j]\n          op.right = mostRight\n        }\n        yield * eventHandler.awaitOps(this, this.applyCreatedOperations, [ops])\n      })\n      // always remember to do that after this.os.requestTransaction\n      // (otherwise values might contain a undefined reference to type)\n      eventHandler.awaitAndPrematurelyCall(ops)\n    }\n    delete (pos, length) {\n      if (length == null) { length = 1 }\n      if (typeof length !== 'number') {\n        throw new Error('length must be a number!')\n      }\n      if (typeof pos !== 'number') {\n        throw new Error('pos must be a number!')\n      }\n      if (pos + length > this._content.length || pos < 0 || length < 0) {\n        throw new Error('The deletion range exceeds the range of the array!')\n      }\n      if (length === 0) {\n        return\n      }\n      var eventHandler = this.eventHandler\n      var dels = []\n      var delLength\n      for (var i = 0; i < length; i = i + delLength) {\n        var targetId = this._content[pos + i].id\n        // how many insertions can we delete in one deletion?\n        for (delLength = 1; i + delLength < length; delLength++) {\n          if (!Y.utils.compareIds(this._content[pos + i + delLength].id, [targetId[0], targetId[1] + delLength])) {\n            break\n          }\n        }\n        dels.push({\n          target: targetId,\n          struct: 'Delete',\n          length: delLength\n        })\n      }\n      this.os.requestTransaction(function * () {\n        yield * eventHandler.awaitOps(this, this.applyCreatedOperations, [dels])\n      })\n      // always remember to do that after this.os.requestTransaction\n      // (otherwise values might contain a undefined reference to type)\n      eventHandler.awaitAndPrematurelyCall(dels)\n    }\n    observe (f) {\n      this.eventHandler.addEventListener(f)\n    }\n    observeDeep (f) {\n      this._deepEventHandler.addEventListener(f)\n    }\n    unobserve (f) {\n      this.eventHandler.removeEventListener(f)\n    }\n    unobserveDeep (f) {\n      this._deepEventHandler.removeEventListener(f)\n    }\n    * _changed (transaction, op) {\n      if (!op.deleted) {\n        if (op.struct === 'Insert') {\n          // update left\n          var l = op.left\n          var left\n          while (l != null) {\n            left = yield * transaction.getInsertion(l)\n            if (!left.deleted) {\n              break\n            }\n            l = left.left\n          }\n          op.left = l\n          // if op contains opContent, initialize it\n          if (op.opContent != null) {\n            yield * transaction.store.initType.call(transaction, op.opContent)\n          }\n        }\n        this.eventHandler.receivedOp(op)\n      }\n    }\n  }\n\n  Y.extend('Array', new Y.utils.CustomTypeDefinition({\n    name: 'Array',\n    class: YArray,\n    struct: 'List',\n    initType: function * YArrayInitializer (os, model) {\n      var _content = []\n      var _types = []\n      yield * Y.Struct.List.map.call(this, model, function (op) {\n        if (op.hasOwnProperty('opContent')) {\n          _content.push({\n            id: op.id,\n            type: op.opContent\n          })\n          _types.push(op.opContent)\n        } else {\n          op.content.forEach(function (c, i) {\n            _content.push({\n              id: [op.id[0], op.id[1] + i],\n              val: op.content[i]\n            })\n          })\n        }\n      })\n      for (var i = 0; i < _types.length; i++) {\n        var type = yield * this.store.initType.call(this, _types[i])\n        type._parent = model.id\n      }\n      return new YArray(os, model.id, _content)\n    },\n    createType: function YArrayCreateType (os, model) {\n      return new YArray(os, model.id, [])\n    }\n  }))\n}\n\nexport default extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"],"names":["extend","Y","YArray","os","_model","_content","_parent","_deepEventHandler","utils","EventListenerHandler","eventHandler","EventHandler","op","struct","_this","some","c","compareIds","id","pos","left","findIndex","Error","values","length","hasOwnProperty","splice","opContent","type","getType","contents","content","map","i","apply","concat","slice","bubbleEvent","inDeletionRange","delLength","target","val","childId","this","destroy","x","_this2","insert","Array","isArray","mostLeft","ops","prevId","typeDefinition","isTypeDefinition","push","getNextOpId","typeid","createType","requestTransaction","getInsertionCleanEnd","ml","right","getOperation","parent","start","j","mostRight","awaitOps","applyCreatedOperations","awaitAndPrematurelyCall","dels","targetId","f","addEventListener","removeEventListener","transaction","deleted","l","getInsertion","store","initType","call","receivedOp","CustomType","CustomTypeDefinition","YArrayInitializer","model","Struct","List","forEach","_types"],"mappings":";;;;;iLAEA,SAASA,GAAQC,MACTC,0BACSC,EAAIC,EAAQC,uFAElBF,GAAKA,IACLC,OAASA,IAETC,SAAWA,IAGXC,QAAU,OACVC,kBAAoB,GAAIN,GAAEO,MAAMC,uBAGhCC,aAAe,GAAIT,GAAEO,MAAMG,aAAa,SAACC,MAE1B,WAAdA,EAAGC,OAAqB,IAEtBC,EAAKT,SAASU,KAAK,SAAUC,SAAYf,GAAEO,MAAMS,WAAWD,EAAEE,GAAIN,EAAGM,gBAIrEC,aAGY,OAAZP,EAAGQ,OACC,aAEA,EAAIN,EAAKT,SAASgB,UAAU,SAAUL,SACnCf,GAAEO,MAAMS,WAAWD,EAAEE,GAAIN,EAAGQ,UAE1B,OACH,IAAIE,OAAM,4BAchBC,GACAC,KACAZ,EAAGa,eAAe,aAAc,GAC7BpB,SAASqB,OAAOP,EAAK,MACpBP,EAAGM,QACDN,EAAGe,cAEF,KACLC,GAAOd,EAAKX,GAAG0B,QAAQjB,EAAGe,aACzBrB,QAAUQ,EAAKV,UACVwB,OACL,IACDE,GAAWlB,EAAGmB,QAAQC,IAAI,SAAUhB,EAAGiB,cAElCrB,EAAGM,GAAG,GAAIN,EAAGM,GAAG,GAAKe,OACrBjB,IAKLc,GAASN,OAAS,MACfnB,SAASqB,OAAOQ,MAAMpB,EAAKT,UAAWc,EAAK,GAAGgB,OAAOL,MAErDzB,SAAWS,EAAKT,SAAS+B,MAAM,EAAGjB,GAAKgB,OAAOL,GAAUK,OAAOrB,EAAKT,SAAS+B,MAAMjB,MAEjFP,EAAGmB,UACHnB,EAAGmB,QAAQP,SAEpBhB,MAAM6B,oBACA,wBAEClB,SACCI,SACAC,QAEL,CAAA,GAAkB,WAAdZ,EAAGC,YAwCN,IAAIS,OAAM,6BAvCZW,GAAI,EACDA,EAAInB,EAAKT,SAASmB,QAAUZ,EAAGY,OAAS,EAAGS,IAAK,IACjDjB,GAAIF,EAAKT,SAAS4B,MAClBhC,EAAEO,MAAM8B,gBAAgB1B,EAAII,EAAEE,IAAK,IAEjCqB,OAECA,EAAY,EACXA,EAAY3B,EAAGY,QAAUS,EAAIM,EAAYzB,EAAKT,SAASmB,QAAUvB,EAAEO,MAAM8B,gBAAgB1B,EAAIE,EAAKT,SAAS4B,EAAIM,GAAWrB,IAC1HqB,OAEFzB,EAAKT,SAAS4B,EAAIM,EAAY,KAE/Bf,QAAUR,EAAEE,GAAG,GAAKN,EAAG4B,OAAO,GAAK,IACnCA,QAAUxB,EAAEE,GAAG,GAAIF,EAAEE,GAAG,GAAK,MAE5Ba,GAAUjB,EAAKT,SAASqB,OAAOO,EAAGM,GAClChB,EAASQ,EAAQC,IAAI,SAAChB,SACX,OAATA,EAAEyB,IACGzB,EAAEyB,IAEF3B,EAAKX,GAAG0B,QAAQb,EAAEY,UAG3BpB,MAAM6B,oBACA,wBAECJ,SACCV,WACEQ,SACFQ,oEAaHG,SACRC,MAAKtC,SAASgB,UAAU,kBACnB,OAAVL,EAAEY,MAAgB3B,EAAEO,MAAMS,WAAWD,EAAEY,KAAMc,6CAI1ChC,aAAakC,eACblC,aAAe,UACfL,SAAW,UACXD,OAAS,UACTE,QAAU,UACVH,GAAK,iCAKPgB,MACQ,MAAPA,GAA8B,gBAARA,QAClB,IAAIG,OAAM,8BAEdH,GAAOwB,KAAKtC,SAASmB,cAGM,OAA3BmB,KAAKtC,SAASc,GAAKS,KACde,KAAKtC,SAASc,GAAKsB,IAEnBE,KAAKxC,GAAG0B,QAAQc,KAAKtC,SAASc,GAAKS,yDAIrCe,MAAKtC,SAAS2B,IAAI,SAACa,EAAGZ,SACb,OAAVY,EAAEjB,KACGkB,EAAK3C,GAAG0B,QAAQgB,EAAEjB,MAElBiB,EAAEJ,mCAITX,SACGa,MAAKI,OAAOJ,KAAKtC,SAASmB,OAAQM,kCAEnCX,EAAKW,MACQ,gBAARX,QACH,IAAIG,OAAM,6BAEb0B,MAAMC,QAAQnB,QACX,IAAIR,OAAM,4CAEM,IAApBQ,EAASN,WAGTL,EAAMwB,KAAKtC,SAASmB,QAAUL,EAAM,OAChC,IAAIG,OAAM,qDAMb,GAJD4B,GAAmB,IAAR/B,EAAY,KAAOwB,KAAKtC,SAASc,EAAM,GAAGD,GAErDiC,KACAC,EAASF,EACJjB,EAAI,EAAGA,EAAIH,EAASN,QAAS,QAYhC6B,GAXAzC,QACIwC,SACEA,SAKAT,KAAKvC,cACL,UAENC,KAEG4B,EAAIH,EAASN,QAAQ,IACtBiB,GAAMX,EAASG,UACFhC,EAAEO,MAAM8C,iBAAiBb,GAGnC,CAAA,GAAIpC,EAASmB,OAAS,EAAG,mBADrB+B,KAAKd,MAQdpC,EAASmB,OAAS,IAEjBO,QAAU1B,IACVa,GAAKyB,KAAKxC,GAAGqD,YAAYnD,EAASmB,YAChC,IAEDiC,GAASd,KAAKxC,GAAGqD,YAAY,QAC5BrD,GAAGuD,WAAWL,EAAgBI,KAChC9B,UAAY8B,IACZvC,GAAKyB,KAAKxC,GAAGqD,YAAY,KAE1BD,KAAK3C,KACAA,EAAGM,MAEVR,GAAeiC,KAAKjC,kBACnBP,GAAGwD,2CAAmB,2GAGT,MAAZT,yCACeP,KAAKiB,qBAAqBV,2BAC/BW,EAAGC,mDAEMnB,KAAKoB,aAAaZ,EAAI,GAAGa,8BAASC,iBAEhDC,EAAI,EAAGA,EAAIf,EAAI3B,OAAQ0C,MACrBf,EAAIe,KACVJ,MAAQK,yBAELzD,EAAa0D,SAASzB,KAAMA,KAAK0B,wBAAyBlB,8DAIvDmB,wBAAwBnB,mCAE/BhC,EAAKK,MACG,MAAVA,MAA2B,GACT,gBAAXA,QACH,IAAIF,OAAM,+BAEC,gBAARH,QACH,IAAIG,OAAM,4BAEdH,EAAMK,EAASmB,KAAKtC,SAASmB,QAAUL,EAAM,GAAKK,EAAS,OACvD,IAAIF,OAAM,yDAEH,IAAXE,OAMC,GADDe,GAFA7B,EAAeiC,KAAKjC,aACpB6D,KAEKtC,EAAI,EAAGA,EAAIT,EAAQS,GAAQM,EAAW,IACzCiC,GAAW7B,KAAKtC,SAASc,EAAMc,GAAGf,OAEjCqB,EAAY,EAAGN,EAAIM,EAAYf,GAC7BvB,EAAEO,MAAMS,WAAW0B,KAAKtC,SAASc,EAAMc,EAAIM,GAAWrB,IAAKsD,EAAS,GAAIA,EAAS,GAAKjC,IADjDA,OAKvCgB,aACKiB,SACA,gBACAjC,SAGPpC,GAAGwD,2CAAmB,mHACjBjD,EAAa0D,SAASzB,KAAMA,KAAK0B,wBAAyBE,4DAIvDD,wBAAwBC,oCAE9BE,QACF/D,aAAagE,iBAAiBD,uCAExBA,QACNlE,kBAAkBmE,iBAAiBD,qCAE/BA,QACJ/D,aAAaiE,oBAAoBF,yCAEzBA,QACRlE,kBAAkBoE,oBAAoBF,8DAEjCG,EAAahE,6FAClBA,EAAGiE,4BACY,WAAdjE,EAAGC,0BAEGD,EAAGQ,eAEC,MAAL0D,0CACUF,EAAYG,aAAaD,4BACnC1D,EAAKyD,6DAGNzD,EAAKA,iCAERA,KAAO0D,EAEU,MAAhBlE,EAAGe,kDACGiD,EAAYI,MAAMC,SAASC,KAAKN,EAAahE,EAAGe,iCAGvDjB,aAAayE,WAAWvE,qFA5KxB+B,MAAKtC,SAASmB,cA1IJvB,EAAEO,MAAM4E,cA2T3BpF,OAAO,QAAS,GAAIC,GAAEO,MAAM6E,2BACtB,cACCnF,SACC,wCACE,QAAWoF,GAAmBnF,EAAIoF,+HAGlCtF,EAAEuF,OAAOC,KAAKzD,IAAIkD,KAAKvC,KAAM4C,EAAO,SAAU3E,GAChDA,EAAGa,eAAe,gBACX8B,SACH3C,EAAGM,QACDN,EAAGe,cAEJ4B,KAAK3C,EAAGe,cAEZI,QAAQ2D,QAAQ,SAAU1E,EAAGiB,KACrBsB,UACF3C,EAAGM,GAAG,GAAIN,EAAGM,GAAG,GAAKe,OACrBrB,EAAGmB,QAAQE,0BAKX,cAAGA,EAAI0D,EAAOnE,gDACNmB,KAAKqC,MAAMC,SAASC,KAAKvC,KAAMgD,EAAO1D,4BACpD3B,QAAUiF,EAAMrE,8DAEhB,GAAIhB,GAAOC,EAAIoF,EAAMrE,GAAIb,wCAvBbiF,qBAyBT,SAA2BnF,EAAIoF,SAClC,IAAIrF,GAAOC,EAAIoF,EAAMrE,y0BAMjB,mBAANjB,MACFA"}